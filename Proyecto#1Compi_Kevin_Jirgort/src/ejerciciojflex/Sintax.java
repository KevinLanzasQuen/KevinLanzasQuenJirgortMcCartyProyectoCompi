
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 19 23:25:51 CST 2022
//----------------------------------------------------

package ejerciciojflex;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 19 23:25:51 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\011\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\004\005\000\002\004\006\000\002\004\005\000\002\004" +
    "\010\000\002\004\007\000\002\004\003\000\002\005\011" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\007\000\002\010\015\000\002\007\011\000\002" +
    "\011\011\000\002\012\012\000\002\012\011\000\002\013" +
    "\004\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\024\005\001\002\000\004\002\135\001" +
    "\002\000\004\052\006\001\002\000\004\047\007\001\002" +
    "\000\004\046\010\001\002\000\004\051\011\001\002\000" +
    "\020\004\013\016\021\022\020\024\023\026\015\031\014" +
    "\032\026\001\002\000\022\004\ufff8\016\ufff8\022\ufff8\024" +
    "\ufff8\026\ufff8\031\ufff8\032\ufff8\050\ufff8\001\002\000\004" +
    "\022\131\001\002\000\004\047\123\001\002\000\004\047" +
    "\111\001\002\000\022\004\ufff6\016\ufff6\022\ufff6\024\ufff6" +
    "\026\ufff6\031\ufff6\032\ufff6\050\ufff6\001\002\000\022\004" +
    "\uffff\016\uffff\022\uffff\024\uffff\026\uffff\031\uffff\032\uffff" +
    "\050\uffff\001\002\000\024\004\ufff0\016\ufff0\022\ufff0\024" +
    "\ufff0\026\ufff0\031\ufff0\032\ufff0\047\105\050\ufff0\001\002" +
    "\000\004\022\100\001\002\000\022\004\ufff9\016\ufff9\022" +
    "\ufff9\024\ufff9\026\ufff9\031\ufff9\032\ufff9\050\ufff9\001\002" +
    "\000\004\022\076\001\002\000\022\004\ufffd\016\ufffd\022" +
    "\ufffd\024\ufffd\026\ufffd\031\ufffd\032\ufffd\050\ufffd\001\002" +
    "\000\022\004\013\016\021\022\020\024\023\026\015\031" +
    "\014\032\026\050\075\001\002\000\004\047\027\001\002" +
    "\000\006\004\031\022\032\001\002\000\004\046\064\001" +
    "\002\000\004\022\055\001\002\000\004\011\033\001\002" +
    "\000\004\020\034\001\002\000\004\013\035\001\002\000" +
    "\006\010\040\022\036\001\002\000\004\015\047\001\002" +
    "\000\004\013\041\001\002\000\006\013\uffee\046\uffee\001" +
    "\002\000\006\022\042\030\044\001\002\000\004\030\046" +
    "\001\002\000\004\046\uffe6\001\002\000\004\022\045\001" +
    "\002\000\004\046\uffe4\001\002\000\004\046\uffe5\001\002" +
    "\000\010\010\051\014\050\020\052\001\002\000\004\022" +
    "\053\001\002\000\006\013\uffed\046\uffed\001\002\000\006" +
    "\013\uffec\046\uffec\001\002\000\004\014\054\001\002\000" +
    "\006\013\uffeb\046\uffeb\001\002\000\004\011\056\001\002" +
    "\000\004\020\057\001\002\000\004\013\060\001\002\000" +
    "\006\010\040\022\036\001\002\000\004\013\062\001\002" +
    "\000\006\022\042\030\044\001\002\000\004\046\uffe7\001" +
    "\002\000\004\051\065\001\002\000\020\004\013\016\021" +
    "\022\020\024\023\026\015\031\014\032\026\001\002\000" +
    "\022\004\013\016\021\022\020\024\023\026\015\031\014" +
    "\032\026\050\072\001\002\000\022\004\ufffb\016\ufffb\022" +
    "\ufffb\024\ufffb\026\ufffb\031\ufffb\032\ufffb\050\ufffb\001\002" +
    "\000\022\004\ufff7\016\ufff7\022\ufff7\024\ufff7\026\ufff7\031" +
    "\ufff7\032\ufff7\050\ufff7\001\002\000\022\004\ufffe\016\ufffe" +
    "\022\ufffe\024\ufffe\026\ufffe\031\ufffe\032\ufffe\050\ufffe\001" +
    "\002\000\022\004\uffe8\016\uffe8\022\uffe8\024\uffe8\026\uffe8" +
    "\031\uffe8\032\uffe8\050\uffe8\001\002\000\022\004\ufffa\016" +
    "\ufffa\022\ufffa\024\ufffa\026\ufffa\031\ufffa\032\ufffa\050\ufffa" +
    "\001\002\000\022\004\ufffc\016\ufffc\022\ufffc\024\ufffc\026" +
    "\ufffc\031\ufffc\032\ufffc\050\ufffc\001\002\000\004\002\000" +
    "\001\002\000\004\013\077\001\002\000\022\004\ufff3\016" +
    "\ufff3\022\ufff3\024\ufff3\026\ufff3\031\ufff3\032\ufff3\050\ufff3" +
    "\001\002\000\004\011\101\001\002\000\004\014\102\001" +
    "\002\000\004\014\103\001\002\000\004\013\104\001\002" +
    "\000\022\004\ufff2\016\ufff2\022\ufff2\024\ufff2\026\ufff2\031" +
    "\ufff2\032\ufff2\050\ufff2\001\002\000\004\044\106\001\002" +
    "\000\004\046\107\001\002\000\004\013\110\001\002\000" +
    "\022\004\ufff1\016\ufff1\022\ufff1\024\ufff1\026\ufff1\031\ufff1" +
    "\032\ufff1\050\ufff1\001\002\000\006\010\040\022\036\001" +
    "\002\000\004\046\113\001\002\000\004\051\114\001\002" +
    "\000\020\004\013\016\021\022\020\024\023\026\015\031" +
    "\014\032\026\001\002\000\022\004\013\016\021\022\020" +
    "\024\023\026\015\031\014\032\026\050\116\001\002\000" +
    "\024\004\uffef\016\uffef\022\uffef\024\uffef\026\uffef\027\117" +
    "\031\uffef\032\uffef\050\uffef\001\002\000\004\051\120\001" +
    "\002\000\020\004\013\016\021\022\020\024\023\026\015" +
    "\031\014\032\026\001\002\000\022\004\013\016\021\022" +
    "\020\024\023\026\015\031\014\032\026\050\122\001\002" +
    "\000\022\004\uffea\016\uffea\022\uffea\024\uffea\026\uffea\031" +
    "\uffea\032\uffea\050\uffea\001\002\000\006\010\040\022\036" +
    "\001\002\000\004\046\125\001\002\000\004\051\126\001" +
    "\002\000\020\004\013\016\021\022\020\024\023\026\015" +
    "\031\014\032\026\001\002\000\022\004\013\016\021\022" +
    "\020\024\023\026\015\031\014\032\026\050\130\001\002" +
    "\000\022\004\uffe9\016\uffe9\022\uffe9\024\uffe9\026\uffe9\031" +
    "\uffe9\032\uffe9\050\uffe9\001\002\000\006\011\132\013\133" +
    "\001\002\000\004\013\134\001\002\000\022\004\ufff5\016" +
    "\ufff5\022\ufff5\024\ufff5\026\ufff5\031\ufff5\032\ufff5\050\ufff5" +
    "\001\002\000\022\004\ufff4\016\ufff4\022\ufff4\024\ufff4\026" +
    "\ufff4\031\ufff4\032\ufff4\050\ufff4\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\024\004\016\005\023\007\011\010" +
    "\021\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\070\005\073\007\066\010\072\011\067\001\001\000\002" +
    "\001\001\000\004\012\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\060\001\001\000\002\001" +
    "\001\000\004\013\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\065\004\016\005\023\007\011\010" +
    "\021\011\015\001\001\000\014\004\070\005\073\007\066" +
    "\010\072\011\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\114\004\016\005\023\007\011\010\021" +
    "\011\015\001\001\000\014\004\070\005\073\007\066\010" +
    "\072\011\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\120\004\016\005\023\007\011\010\021\011" +
    "\015\001\001\000\014\004\070\005\073\007\066\010\072" +
    "\011\067\001\001\000\002\001\001\000\004\006\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\126" +
    "\004\016\005\023\007\011\010\021\011\015\001\001\000" +
    "\014\004\070\005\073\007\066\010\072\011\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_FOR ::= DecInc Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_FOR ::= Id DecInc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_FOR ::= Id Asig Entero ExprFinal SENTENCIA_BOOL ExprFinal DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_FOR ::= Tipo Id Asig Entero ExprFinal SENTENCIA_BOOL ExprFinal DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FOR ::= For ParentesisA SENTENCIA_FOR ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= While ParentesisA SENTENCIA_BOOL ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF_ELSE ::= If ParentesisA SENTENCIA_BOOL ParentesisC LlaveA SENTENCIA LlaveC Else LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_BOOL ::= Id Comparador Comillas Id Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_BOOL ::= Id Comparador Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_BOOL ::= Id Comparador Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_BOOL ::= Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IF ::= If ParentesisA SENTENCIA_BOOL ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Id ParentesisA Parametros ParentesisC ExprFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Cadena Id Asig Comillas Comillas ExprFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Int Id ExprFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Tipo Id Asig ExprFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= Tipo Id ExprFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int main ParentesisA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

