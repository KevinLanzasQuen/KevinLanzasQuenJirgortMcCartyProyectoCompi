[TIPO_DATO,1], int
[IDENTIFICADOR,1], main
[SEPARADOR,1], (
[SEPARADOR,2], )
[SEPARADOR,3], {

[IDENTIFICADOR,2], miFunct
[SEPARADOR,4], (
[IDENTIFICADOR,3], hola
[SEPARADOR,5], ,
[STRING, 1], 'a'
[SEPARADOR,6], )
[FINAL_EXPRESION,1], #

[TIPO_DATO,2], int
[IDENTIFICADOR,4], arr
[SEPARADOR,7], [
[ENTERO, 1], 10
[SEPARADOR,8], ]
[FINAL_EXPRESION,2], #

[IDENTIFICADOR,5], arr
[SEPARADOR,9], [
[SEPARADOR,10], ]
[ASIGNACION,1], =
[ENTERO, 2], 12
[OPERADOR, 1], +
[ENTERO, 3], 56
[FINAL_EXPRESION,3], #

[IDENTIFICADOR,6], arr
[SEPARADOR,11], [
[ENTERO, 4], 1
[SEPARADOR,12], ]
[ASIGNACION,2], =
[NULO,1], null
[FINAL_EXPRESION,4], #

[TIPO_DATO,3], float
[IDENTIFICADOR,7], miFloat
[ASIGNACION,3], =
[IDENTIFICADOR,8], arr
[SEPARADOR,13], [
[ENTERO, 5], 5
[SEPARADOR,14], ]
[ENTERO, 6], -
[FLOTANTE, 1], -67.5
[OPERADOR, 2], *
[FLOTANTE, 2], 5.5
[FINAL_EXPRESION,5], #

[SEPARADOR,15], }



[TIPO_DATO,4], int
[IDENTIFICADOR,9], miFunc
[SEPARADOR,16], (
[TIPO_DATO,5], int
[IDENTIFICADOR,10], dif
[SEPARADOR,17], ,
[TIPO_DATO,6], char
[IDENTIFICADOR,11], otra
[SEPARADOR,18], )
[SEPARADOR,19], {

[TIPO_DATO,7], int
[IDENTIFICADOR,12], a
[FINAL_EXPRESION,6], #

[TIPO_DATO,8], string
[IDENTIFICADOR,13], str
[ASIGNACION,4], =
[STRING, 2], 'jirgort mccarty'
[FINAL_EXPRESION,7], #


[IDENTIFICADOR,14], miV
[ASIGNACION,5], =
[SEPARADOR,20], (
[IDENTIFICADOR,15], var
[OPERADOR, 3], +
[ENTERO, 7], 23
[SEPARADOR,21], )
[COMPARADOR,1], >
[ENTERO, 8], 45
[EXPRESION_LOGICA,1], &
[BOOLEAN,1], true
[EXPRESION_LOGICA,2], |
[IDENTIFICADOR,16], otra
[COMPARADOR,2], ==
[IDENTIFICADOR,17], otrFunc
[SEPARADOR,22], (
[SEPARADOR,23], )
[FINAL_EXPRESION,8], #

[ESTRUCTURA_CONTROL,1], switch
[SEPARADOR,24], (
[IDENTIFICADOR,18], miV
[SEPARADOR,25], )
[SEPARADOR,26], {

[ESTRUCTURA_CONTROL,2], case
[ENTERO, 9], 1
[SEPARADOR,27], :

[ESTRUCTURA_CONTROL,3], print
[SEPARADOR,28], (
[STRING, 3], '1'
[SEPARADOR,29], )
[FINAL_EXPRESION,9], #

[ESTRUCTURA_CONTROL,4], break
[FINAL_EXPRESION,10], #

[ESTRUCTURA_CONTROL,5], case
[ENTERO, 10], 2
[SEPARADOR,30], :

[IDENTIFICADOR,19], miV
[ASIGNACION,6], =
[IDENTIFICADOR,20], miV
[ENTERO, 11], -
[ENTERO, 12], -
[FINAL_EXPRESION,11], #

[ESTRUCTURA_CONTROL,6], default
[SEPARADOR,31], :

[IDENTIFICADOR,21], miV
[ASIGNACION,7], =
[IDENTIFICADOR,22], miV
[ENTERO, 13], -
[ENTERO, 14], -
[OPERADOR, 4], *
[IDENTIFICADOR,23], miV
[OPERADOR, 5], +
[ENTERO, 15], 1
[FINAL_EXPRESION,12], #

[SEPARADOR,32], }

[SEPARADOR,33], }

[ESTRUCTURA_CONTROL,7], while
[SEPARADOR,34], (
[EXPRESION_LOGICA,3], !
[SEPARADOR,35], (
[BOOLEAN,2], true
[COMPARADOR,3], ==
[SEPARADOR,36], (
[IDENTIFICADOR,24], asd
[COMPARADOR,4], >
[ENTERO, 16], 12
[SEPARADOR,37], )
[EXPRESION_LOGICA,4], &
[SEPARADOR,38], (
[SEPARADOR,39], (
[ENTERO, 17], 34
[OPERADOR, 6], +
[ENTERO, 18], 34
[SEPARADOR,40], )
[COMPARADOR,5], >
[ENTERO, 19], 12
[SEPARADOR,41], )
[SEPARADOR,42], )
[SEPARADOR,43], )
[SEPARADOR,44], {

[ESTRUCTURA_CONTROL,8], print
[SEPARADOR,45], (
[SEPARADOR,46], )
[FINAL_EXPRESION,13], #

[SEPARADOR,47], }

[IDENTIFICADOR,25], miV
[ASIGNACION,8], =
[ENTERO, 20], 45
[EXPRESION_LOGICA,5], &
[IDENTIFICADOR,26], var
[FINAL_EXPRESION,14], #

[SEPARADOR,48], }

[IDENTIFICADOR,27], Tipo
[SEPARADOR,49], ,
[IDENTIFICADOR,28], Nulo
[SEPARADOR,50], ,
[IDENTIFICADOR,29], Flotante
[SEPARADOR,51], ,
[IDENTIFICADOR,30], ExprLogica
[SEPARADOR,52], ,
[IDENTIFICADOR,31], Boolean
[SEPARADOR,53], ,
[IDENTIFICADOR,32], Asig
[SEPARADOR,54], ,
[IDENTIFICADOR,33], Separador
[SEPARADOR,55], ,
[IDENTIFICADOR,34], ExprFinal
[SEPARADOR,56], ,
[IDENTIFICADOR,35], Comillas
[SEPARADOR,57], ,

[IDENTIFICADOR,36], Comparador
[SEPARADOR,58], ,
[IDENTIFICADOR,37], Cadena
[SEPARADOR,59], ,
[IDENTIFICADOR,38], EstruControl
[SEPARADOR,60], ,
[IDENTIFICADOR,39], Entero
[SEPARADOR,61], ,
[IDENTIFICADOR,40], Operador
[SEPARADOR,62], ,
[IDENTIFICADOR,41], Id
[SEPARADOR,63], ,
[IDENTIFICADOR,42], Char
[SEPARADOR,64], ,
[IDENTIFICADOR,43], Int
[SEPARADOR,65], ,
[IDENTIFICADOR,44], String
[SEPARADOR,66], ,
[IDENTIFICADOR,45], If
[SEPARADOR,67], ,
[IDENTIFICADOR,46], Else
[SEPARADOR,68], ,
[IDENTIFICADOR,47], DecInc
[SEPARADOR,69], ,

[IDENTIFICADOR,48], While
[SEPARADOR,70], ,
[IDENTIFICADOR,49], For
[SEPARADOR,71], ,
[IDENTIFICADOR,50], Switch
[SEPARADOR,72], ,
[IDENTIFICADOR,51], Return
[SEPARADOR,73], ,
[IDENTIFICADOR,52], Break
[SEPARADOR,74], ,
[IDENTIFICADOR,53], Case
[SEPARADOR,75], ,
[IDENTIFICADOR,54], Default
[SEPARADOR,76], ,
[IDENTIFICADOR,55], Print
[SEPARADOR,77], ,
[IDENTIFICADOR,56], Multiplicacion
[SEPARADOR,78], ,
[IDENTIFICADOR,57], Suma
[SEPARADOR,79], ,
[IDENTIFICADOR,58], Resta
[SEPARADOR,80], ,

[IDENTIFICADOR,59], Division
[SEPARADOR,81], ,
[IDENTIFICADOR,60], ParentesisC
[SEPARADOR,82], ,
[IDENTIFICADOR,61], ParentesisA
[SEPARADOR,83], ,
[IDENTIFICADOR,62], LlaveC
[SEPARADOR,84], ,
[IDENTIFICADOR,63], LlaveA
[SEPARADOR,85], ,
[IDENTIFICADOR,64], main
[SEPARADOR,86], ,
[IDENTIFICADOR,65], CorcheteA
[SEPARADOR,87], ,
[IDENTIFICADOR,66], CorcheteC
[SEPARADOR,88], ,
[IDENTIFICADOR,67], Coma
[SEPARADOR,89], ,
[IDENTIFICADOR,68], DosPuntos
[SEPARADOR,90], ,

[IDENTIFICADOR,69], ERROR
